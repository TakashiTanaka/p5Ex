{"version":3,"file":"p5ex.js","mappings":"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","sources":["webpack://p5ex/webpack/bootstrap","webpack://p5ex/webpack/runtime/define property getters","webpack://p5ex/webpack/runtime/hasOwnProperty shorthand","webpack://p5ex/webpack/runtime/make namespace object","webpack://p5ex/./src/modules/Extension.js","webpack://p5ex/./src/modules/Object.js","webpack://p5ex/./src/modules/Function.js","webpack://p5ex/./src/modules/Utility.js","webpack://p5ex/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const exLine = (vector1, vector2) => line(vector1.x, vector1.y, vector2.x, vector2.y);\n\nexport const exText = (vector, str) => text(str, vector.x, vector.y);\n\nexport const exCircle = (vector, diameter) => circle(vector.x, vector.y, diameter);\n\nexport const exRect = (vector, width, height) => rect(vector.x, vector.y, width, height);\n\nexport const exPoint = vector => point(vector.x, vector.y);\n\nexport const exVertex = vector => vertex(vector.x, vector.y);\n\nexport const exCurveVertex = vector => curveVertex(vector.x, vector.y);\n","import * as ex from './Extension';\n\nexport class Obj {\n  constructor(vector, width, height) {\n    this.position = vector;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nexport class Car extends Obj {\n  constructor(vector, width = 100, height = 100, carColor = 100) {\n    super(vector, width, height);\n    this.carColor = carColor;\n  }\n\n  display() {\n    rectMode(CENTER);\n    noStroke();\n    fill(this.carColor);\n    ex.exRect(this.position, 20, 10);\n    rect(this.position.x, this.position.y + 8, 36, 8);\n    fill(0, 100, 0);\n    circle(this.position.x - 8, this.position.y + 12, 6);\n    circle(this.position.x + 8, this.position.y + 12, 6);\n  }\n}\n\nexport class Ball extends Obj {\n  constructor(vector, radius) {\n    super(vector, radius * 2);\n    this.radius = radius;\n  }\n\n  display() {\n    ex.exCircle(this.position, this.width);\n  }\n}\n\nexport class ExEllipse extends Obj {\n  constructor(vector, width, height, pointNum = 60) {\n    super(vector, width, height);\n    this.points = [];\n    this.pointNum = pointNum;\n    this.size = { width: this.width, height: this.height };\n    return this;\n  }\n\n  createPoints() {\n    for (let i = 0; i <= this.pointNum; i++) {\n      this.points.push(\n        createVector(\n          this.position.x + (this.size.width / 2) * cos((TAU / this.pointNum) * i),\n          this.position.y + (this.size.height / 2) * sin((TAU / this.pointNum) * i)\n        )\n      );\n    }\n    return this;\n  }\n\n  draw() {\n    beginShape();\n    this.points.forEach(point => ex.exCurveVertex(point));\n    ex.exCurveVertex(this.points[1]);\n    ex.exCurveVertex(this.points[2]);\n    endShape();\n  }\n}\n","/**\n * 画面領域一杯のカンバスを作成する\n */\nexport const createFullCanvas = () => createCanvas(windowWidth, windowHeight);\n\n// グリッドを描く\nconst drawGrid = unitSize => {\n  const iterator = (iNum, func) => {\n    for (let count = iNum; count--; ) {\n      func(count);\n    }\n  };\n  iterator(ceil(width / unitSize), count => {\n    line(count * unitSize, 0, count * unitSize, height);\n    line(0, count * unitSize, width, count * unitSize);\n  });\n};\n\n// フォントの初期化\nconst initFont = (\n  size = 10,\n  font = 'helvetica-light',\n  horizAlign = LEFT,\n  vertAlign = TOP,\n  leading = 1.5\n) => {\n  textSize(size);\n  textFont(font);\n  textAlign(horizAlign, vertAlign);\n  textLeading(leading);\n};\n\n// 等間隔の線分を描く\nconst drawEqDivLine = (beginXPos, endXPos, divNum, firstYpos, secondYpos) => {\n  iterator(divNum, count =>\n    line(\n      beginXPos + (endXPos / divNum) * count,\n      firstYpos,\n      endXPos / divNum + (endXPos / divNum) * count,\n      secondYpos\n    )\n  );\n};\n\n// 繰り返しのテキストを描く\nconst drawRepeatText = (str, textColor) => {\n  const fontSize = windowWidth / 80;\n  initFont(fontSize);\n  const msg = str;\n  const msgWidth = textWidth(msg);\n  const margin = msgWidth / 5;\n\n  fill(textColor);\n\n  iterator(floor(width / msgWidth), columnCount =>\n    iterator(floor(height / fontSize), rowCount =>\n      text(msg, columnCount * (msgWidth + margin), rowCount * (fontSize + margin))\n    )\n  );\n};\n\n// サインの値を返す\nconst fSin = (base, strength, angle) => base + strength * sin(angle);\n\n// コサインの値を返す\nconst fCos = (base, strength, angle) => base + strength * cos(angle);\n\n// 原点を設定する\nconst setOrigin = (originX, originY, beforeFunc, afterFunc) => {\n  translate(originX, originY);\n  push();\n  beforeFunc();\n  translate(-originX, -originY);\n  afterFunc();\n  pop();\n};\n\n// テキストをカーニング指定して表示\nconst kerningText = (word, value, y) => {\n  const wordSplitter = word => word.split('');\n  const chars = wordSplitter(word);\n  chars.forEach((char, n) => {\n    text(char, n * value, y);\n  });\n};","// 壁との衝突を検知\nexport class CollisionChecker {\n  constructor(target) {\n    this.target = target;\n  }\n\n  check() {\n    const r = this.target.v.x >= width - this.target.size / 2; // right collision\n    const l = this.target.v.x <= 0 + this.target.size / 2; // left collision\n    const t = this.target.v.y <= 0 + this.target.size / 2; // top collision\n    const b = this.target.v.y >= height - this.target.size / 2; // bottom collision\n    return { t, r, b, l };\n  }\n}\n\nexport class Mover {\n  constructor(target, speedSeed) {\n    this.target = target.v;\n    this.speedSeed = speedSeed;\n    this.s = createVector(\n      random(-this.speedSeed, this.speedSeed),\n      random(-this.speedSeed, this.speedSeed)\n    );\n  }\n  reverse(axis) {\n    axis === 'x' && (this.s.x *= -1);\n    axis === 'y' && (this.s.y *= -1);\n  }\n  move() {\n    this.target.add(this.s);\n  }\n}","import * as extension from './modules/Extension';\nimport * as object from './modules/Object';\nimport * as func from './modules/Function';\nimport * as utility from './modules/Utility';\n\nexport const Extension = extension;\nexport const Object = object;\nexport const Function = func;\nexport const Utility = utility;\n\n// // モジュールをグローバルオブジェクト化する関数\n// const convertModulesToWindowObject = modules =>\n//   Object.entries(modules).forEach(module => (window[module[0]] = module[1]));\n\n// [Extension, Obj, Func, Util].forEach(module => convertModulesToWindowObject(module));\n\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","exLine","vector1","vector2","line","x","y","exText","vector","str","text","exCircle","diameter","circle","exRect","width","height","rect","exPoint","point","exVertex","vertex","exCurveVertex","curveVertex","Obj","constructor","this","position","Car","carColor","super","display","rectMode","CENTER","noStroke","fill","Ball","radius","ExEllipse","pointNum","points","size","createPoints","i","push","createVector","cos","TAU","sin","draw","beginShape","forEach","endShape","createFullCanvas","createCanvas","windowWidth","windowHeight","CollisionChecker","target","check","r","v","l","t","b","Mover","speedSeed","s","random","reverse","axis","move","add","Extension","Function","Utility"],"sourceRoot":""}